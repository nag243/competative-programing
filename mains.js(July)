// JS Quiz - 1
// What are the three phases of event propagation ?
// ANS : Capturing > Target > Bubbling
// The event first goes down through the parent elements until
// it reaches the target element(capturing phase).
// When the event reaches the target it triggers there(target phase),
// and then goes back up the chain(bubbling phase), calling handlers along the way.

// JS Quiz - 2

//  {} "" []
// Reason : OR (||) operator evaluates like below
// If all conditions are true => true
// If one of the conditions is true => true
// If all conditions are false => false
// and
// null = false
// false = false
// Note :
// OR operator don't check the entire statement if any one one value is true,
//  it return immediately true with out checking next chain value,
//  that's how worked with " const three "

const one = false || {} || null;
const two = null || false || ''
const three = [] || 0 || true;

console.log(one, two, three)

//Output:  {} '' []

// JS Quiz - 3
// 𝗧𝗵𝗲 𝗲𝗮𝘀𝗶𝗲𝘀𝘁 𝘄𝗮𝘆 𝘁𝗼 𝗰𝗼𝗻𝘃𝗲𝗿𝘁 𝗮𝗻 𝗮𝗿𝗿𝗮𝘆 𝘁𝗼 𝗮𝗻 𝗼𝗯𝗷𝗲𝗰𝘁 is using spread(...)operator
const fruits = ['banana', 'apple', 'orange']

const fruitsObject = {...fruits }

console.log(fruitsObject)
    // Output:
    // {
    //     "0": "banana",
    //     "1": "apple",
    //     "2": "orange"
    // }

// JS Quiz - 4
function sum(num1, num2 = num1) {
    console.log(num1 + num2);
}

sum(10)
    //Output: 20

// JS quiz - 5
// Sum values fron an array using reduce 
var numbers = [1, 2, 3, 4]
var sum = numbers.reduce((x, y) => x + y);
console.log(sum)

// output: 10

// JS quiz - 6 (Spread operator )
const userInfo = ['Nag', 25, 'earth'];

function getUserInfo([name, , address]) {
    console.log(name, address)
}

getUserInfo(userInfo)
    // Output: Nag earth



// JS quiz - 7

function greeting() {
    throw 'Hello world';
}

function sayHi() {
    try {
        const data = greeting();
        console.log('It worked!', data);
    } catch (e) {
        console.log('Oh no an error:', e);
    }
}

sayHi();
// Oh no an error: Hello world

// JS quiz - 8

// Nornal Way 
if (accesible) {
    console.log('Its open!');
}

// Great way
accesible && console.log('its open!')

// JS quiz - 9
var a = '10CSS';
var b = 'CSS10';

console.log(parseInt(a));
console.log(parseInt(b));

// If first character is something which can be parsed (numbers)...
// it continues and returns the number till it finds an character
//  which cant be parsed....(which is variable a in the above question)
// So in this question...the answer will be 10,NaN

// JS quiz - 10
// 𝗻𝗮𝘃𝗶𝗴𝗮𝘁𝗼𝗿.𝘂𝘀𝗲𝗿𝗔𝗴𝗲𝗻𝘁 ()  𝘪𝘴 𝘶𝘴𝘦𝘥 𝘧𝘰𝘳 𝘳𝘦𝘵𝘶𝘳𝘯𝘪𝘯𝘨 𝘵𝘩𝘦 𝘶𝘴𝘦𝘳-𝘢𝘨𝘦𝘯𝘵 𝘩𝘦𝘢𝘥𝘦𝘳'𝘴 𝘷𝘢𝘭𝘶𝘦 𝘴𝘦𝘯𝘵 𝘵𝘰 𝘵𝘩𝘦 𝘴𝘦𝘳𝘷𝘦𝘳 𝘣𝘺 𝘵𝘩𝘦 𝘣𝘳𝘰𝘸𝘴𝘦𝘳.
if (/Android | webOS | iPhone | OperaMini/i.test(navigator.userAgent)) {
    //true for mobile device 
    console.log("mobile")
} else {
    // false for not mobile device 
    console.log("not mobile device")
}

// JS quiz - 11
// DOM Trick

// In JavaScript DOM, you can choose to only fire an event once. 
// This means you can allow an event to only be triggered once on a specific element.
const elem = document.querySelector('button');

elem.addEventListener("click", () => {
    console.log("Nageshwar Nag");
}, { once: true })


// JS quiz - 12

// 2nd returns an error output
// Reason :
// ✅In first , operator is like the (?.)chaining operator, here instead of causing an error ..
// if there is a nullish reference(null or undefined),
//  the expression short-circuits with a return value of undefined.
//   So it returns undefined .
// ❌In second , the object checks for the property and it’s nested properties ,
//  and it simply produce error like can’t read properties of undefined

let user = {};
// console.log(user ? .name ? .status);

// let user = {};
console.log(user.name.status);

// JS Quiz - 13

console.log(null == undefined) //true
console.log(null === undefined) //false 


// JS Quiz - 14
// Validation Trick in JS
const isRequired = () => {
    throw new Error("param is required")
}

const print = (value = isRequired()) => {
    console.log(`${value}`);
}

print(2);
// 2

print() //Throw Error
    // Uncaught Error: param is required


// JS Quiz - 15
const arr = [{}, 'a', null, undefined]

arr.forEach(el => console.log(typeof el === 'object'))

// Output: true ,false true ,false

// JS Quiz - 16
// 𝗧𝗵𝗲 𝘀𝗶𝗺𝗽𝗹𝗲𝘀𝘁 𝘄𝗮𝘆 𝘁𝗼 𝗴𝗲𝘁 𝗹𝗲𝗻𝗴𝘁𝗵/𝘀𝗶𝘇𝗲 𝗼𝗳 𝗮𝗻 𝗼𝗯𝗷𝗲𝗰𝘁 𝗶𝗻 𝗷𝗮𝘃𝗮𝘀𝗰𝗿𝗶𝗽𝘁 𝗶𝘀 𝘂𝘀𝗶𝗻𝗴 𝗼𝗯𝗷𝗲𝗰𝘁.𝗸𝗲𝘆 𝗺𝗲𝘁𝗵𝗼𝗱 
const userData = {
    name: "nag",
    age: "25",
    Id: '007'
}

console.log(Object.keys(userData).length;)
    // 3





















// ----------