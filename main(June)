//JS Quiz - 1
//Write a function that takes two numbers (a and b) as arrgument 
//return b percent of a 

function myFunction(a, b) {
    return (a * b) / 100;
}

const a10 = myFunction(100, 50)
const b10 = myFunction(10, 1)
const c10 = myFunction(500, 25)

console.log(a10, b10, c10)
    // 50 0.1 125


// JS Quiz - 2
let text = "Hello World";
let result = text.endsWith("World");


console.log(result)
    // true

// JS Quiz - 3
const users = [
    { id: 1, name: "John" },
    { id: 2, name: "Wick" },
    { id: 3, name: "Kim" }
]
const user = users.find(user => user.name === "Kim");

console.log(user)


// JS Quiz - 4
// target /currenTarget
// {id: 3, name: 'Kim'}

// <ul>
//     <li></li>
//     <li></li>
//     <li></li>
//     <li></li>
//     <li></li>
//     <li></li>
// </ul>

document.querySelector('ul').addEventListener('click', function(e) {
    console.log(e.target) //li or any one element clicked inside ul
    console.log(e.currenTarget) //ul (always)
})

// JS Quiz - 5
// Get current time zone
const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

console.log(timeZone)

// JS Quiz - 5

let a = 1;
a++;
a /= 2;
a = a % 2;

console.log(a)
    // 1


// JS Quiz - 6
// 𝗢𝗻𝗹𝗶𝗻𝗲 / 𝗼𝗳𝗳𝗹𝗶𝗻𝗲 𝘀𝘁𝗮𝘁𝘂𝘀 𝗼𝗳 𝘁𝗵𝗲 𝘂𝘀𝗲𝗿 
if (navigator.onLine) {
    console.log('online');
} else {
    console.log('offline')
}

// JS Quiz - 7
const arr1 = [1];

const arr2 = [2, 3, 4, 5]
const [n, , ...restofArray] = [...arr1, ...arr2];

console.log(...restofArray)
    // 3 4 5


// JS Quiz - 8
// Toggle a CSS class of an element using JavaScript

// If the class already exists in the element's classlist,
//  it is removed. Otherwise, it adds it to the classList 

const element = document.querySelector('div');

element.classList.toggle('ClassName');

// JS Quiz - 9
// every thing will goes to callstack(task queue) queue only,
//  even the last promise.resolve will goes to micro task queue but
//  due to settimeout() it again goes to callstack queue

new Promise(() => {
    setTimeout(() => {
        console.log(10)
    }, 0);
})

setTimeout(() => {
    console.log(2);
}, 8);

setTimeout(() => {
    console.log(1);
}, -1000);

Promise.resolve().then(() => {
    setTimeout(() => {
        console.log(4)
    }, -999);
});
// Output: 10 1 4 2